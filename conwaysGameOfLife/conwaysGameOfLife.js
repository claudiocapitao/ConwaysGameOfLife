var canvas = document.getElementById("canvas");
var context = canvas.getContext("2d");

//canvas.width = window.innerWidth;
//canvas.height = window.innerHeight;

canvas.width = 800;
canvas.height = 500;

canvas.style.background = "#f7f3f0";

class Square {
    constructor(x, y, w, h, color) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
        this.color = color;
    }

    draw(context) {
        context.beginPath();
        context.rect(this.x, this.y, this.w, this.h);
        context.fillStyle = this.color;
        context.strokeStyle = "#FFFFFF";
        context.fill();
        context.stroke();
    }

    update() {
        context.clearRect(this.x, this.y, this.w, this.h)
    }
}

var allSquares = [];
var gameOfLifeBoard = [];

var numberOfCellsPerRow = canvas.width / 10;
var numberOfCellsPerColumn = canvas.height / 10;

for (var i = 0; i < numberOfCellsPerColumn; i++) {
    allSquares[i] = [];
    gameOfLifeBoard[i] = [];
    for (var j = 0; j < numberOfCellsPerRow; j++) {
        var mySquare = new Square(j * 10, i * 10, 10, 10, "#f7f3f0");
        allSquares[i][j] = mySquare;
        gameOfLifeBoard[i][j] = 0;
        allSquares[i][j].draw(context);
    }
}

canvas.addEventListener("click", (event) => {
    var rect = canvas.getBoundingClientRect();
    const xMouse = event.clientX - rect.left;
    const yMouse = event.clientY - rect.top;
    console.log("x:" + xMouse + "y:" + yMouse);
    j = parseInt(xMouse / 10);
    i = parseInt(yMouse / 10);
    console.log("i: " + i + " j: " + j);

    if (gameOfLifeBoard[i][j] == 0) {
        allSquares[i][j].update(context);
        allSquares[i][j].color = "#777777";
        gameOfLifeBoard[i][j] = 1;
        allSquares[i][j].draw(context);
    } else if (gameOfLifeBoard[i][j] == 1) {
        allSquares[i][j].update(context);
        allSquares[i][j].color = "#f7f3f0";
        gameOfLifeBoard[i][j] = 0;
        allSquares[i][j].draw(context);
    }
    console.log(i + " : " + j + " = " + gameOfLifeBoard[i][j])
})

function CountNeighbours(i, j, boardArray) {
    iLen = boardArray.length;
    jLen = boardArray[i].length;

    counter = 0;

    //topLeftPosition
    if (boardArray[(iLen - 1 + i) % iLen][(jLen - 1 + j) % jLen] == 1) { counter++ };
    //topMiddlePosition
    if (boardArray[(iLen - 1 + i) % iLen][j] == 1) { counter++ };
    //topRightPosition
    if (boardArray[(iLen - 1 + i) % iLen][(jLen + 1 + j) % jLen] == 1) { counter++ };

    //LeftMiddlePosition
    if (boardArray[i][(jLen - 1 + j) % jLen] == 1) { counter++ };
    //RightMiddlePosition
    if (boardArray[i][(jLen + 1 + j) % jLen] == 1) { counter++ };

    //bottomLeftPosition
    if (boardArray[(iLen + 1 + i) % iLen][(jLen - 1 + j) % jLen] == 1) { counter++ };
    //bottomMiddlePosition
    if (boardArray[(iLen + 1 + i) % iLen][j] == 1) { counter++ };
    //bottomRightPosition
    if (boardArray[(iLen + 1 + i) % iLen][(jLen + 1 + j) % jLen] == 1) { counter++ };

    return counter
}

function applyRulesAndConvertCell(i, j, numberOfNeighbours, boardArray) {
    if (boardArray[i][j] == 1) {
        if (numberOfNeighbours < 2) {
            return 0;
        } else if (numberOfNeighbours == 2 || numberOfNeighbours == 3) {
            return 1;
        } else if (numberOfNeighbours > 3) {
            return 0;
        }
    } else if (boardArray[i][j] == 0) {
        if (numberOfNeighbours == 3) {
            return 1;
        } else {
            return 0;
        }
    }
}

function gameOfLife(boardArray) {
    let newGameOfLifeBoard = []
    for (let i = 0; i < boardArray.length; i++) {
        newGameOfLifeBoard[i] = [];
        for (let j = 0; j < boardArray[0].length; j++) {
            let changedValue = applyRulesAndConvertCell(i, j, CountNeighbours(i, j, boardArray), boardArray);
            newGameOfLifeBoard[i][j] = changedValue;
        }
    }
    gameOfLifeBoard = newGameOfLifeBoard;
}

function changeOldArrayWithBorder(boardArray, oldArray) {
    for (let i = 0; i < boardArray.length; i++) {
        for (let j = 0; j < boardArray[0].length; j++) {
            if (boardArray[i][j] == 0) {
                oldArray[i][j].color = "#f7f3f0";
                oldArray[i][j].update(context);
                oldArray[i][j].draw(context);
            } else if (boardArray[i][j] == 1) {
                oldArray[i][j].color = "#777777";
                oldArray[i][j].update(context);
                oldArray[i][j].draw(context);
            }
        }
    }
}

function changeOldArrayWithoutBorder(boardArray, oldArray) {
    for (let i = 0; i < boardArray.length; i++) {
        for (let j = 0; j < boardArray[0].length; j++) {
            if (boardArray[i][j] == 0) {
                oldArray[i][j].color = "#f7f3f0";
                oldArray[i][j].update(context);
                //                oldArray[i][j].draw(context);
            } else if (boardArray[i][j] == 1) {
                oldArray[i][j].color = "#777777";
                oldArray[i][j].update(context);
                oldArray[i][j].draw(context);
            }
        }
    }
}

var boardState = true; // 1 for running and 0 for stop

function startGameOfLife() {
    numberOfCycles = true

    function nextGen() {
        gameOfLife(gameOfLifeBoard);
        changeOldArrayWithoutBorder(gameOfLifeBoard, allSquares);
        if (numberOfCycles) {
            startGameOfLife()
        } else {
            changeOldArrayWithBorder(gameOfLifeBoard, allSquares);
        }
    }
    setTimeout(nextGen, 50);
}

function stopGameOfLife() {
    numberOfCycles = false;
}

function refreshCanvas() {
    stopGameOfLife();

    for (let i = 0; i < gameOfLifeBoard.length; i++) {
        for (let j = 0; j < gameOfLifeBoard[0].length; j++) {
            gameOfLifeBoard[i][j] = 0;
        }
    }
    changeOldArrayWithBorder(gameOfLifeBoard, allSquares);
}

function preDefinedGameOfLife(myArray) {
    let iMiddle = parseInt(gameOfLifeBoard.length / 2);
    let jMiddle = parseInt(gameOfLifeBoard[0].length / 2);

    refreshCanvas()

    for (let i = 0; i < myArray.length; i++) {
        gameOfLifeBoard[iMiddle + myArray[i][0]][jMiddle + myArray[i][1]] = 1;
    }

    changeOldArrayWithBorder(gameOfLifeBoard, allSquares);
}

let arrayGourmet = [
    [-9, 1],
    [-9, 2],
    [-8, 1],
    [-7, -5],
    [-7, -4],
    [-7, -2],
    [-7, -1],
    [-7, 1],
    [-7, 6],
    [-7, 7],
    [-6, -7],
    [-6, -4],
    [-6, -2],
    [-6, 0],
    [-6, 6],
    [-5, -7],
    [-5, -6],
    [-5, -1],
    [-5, 8],
    [-4, 7],
    [-4, 8],
    [-2, 7],
    [-2, 8],
    [-1, -9],
    [-1, 1],
    [-1, 2],
    [-1, 3],
    [-1, 6],
    [-1, 8],
    [0, -9],
    [0, -8],
    [0, -7],
    [0, 1],
    [0, 3],
    [0, 7],
    [1, -6],
    [1, 1],
    [1, 3],
    [1, 8],
    [1, 9],
    [1, 10],
    [2, -7],
    [2, -5],
    [2, 10],
    [3, -7],
    [3, -6],
    [5, -7],
    [5, -6],
    [6, -7],
    [6, 2],
    [6, 7],
    [6, 8],
    [7, -5],
    [7, 1],
    [7, 3],
    [7, 5],
    [7, 8],
    [8, -6],
    [8, -5],
    [8, 0],
    [8, 2],
    [8, 3],
    [8, 5],
    [8, 6],
    [9, 0],
    [10, -1],
    [10, 0]
];

let arrayDoubleBarrelled = [
    [-24, 18],
    [-24, 19],
    [-23, 18],
    [-22, 16],
    [-22, 18],
    [-21, 16],
    [-21, 17],
    [-7, -7],
    [-6, -7],
    [-6, -6],
    [-5, -6],
    [-5, -5],
    [-4, -7],
    [-4, -6],
    [-3, 8],
    [-2, 7],
    [-2, 8],
    [-2, 24],
    [-2, 25],
    [-1, 6],
    [-1, 7],
    [-1, 24],
    [-1, 25],
    [0, -7],
    [0, -6],
    [0, 7],
    [0, 8],
    [1, -24],
    [1, -23],
    [1, -6],
    [1, -5],
    [2, -24],
    [2, -23],
    [2, -7],
    [2, -6],
    [3, -7],
    [4, 7],
    [4, 8],
    [5, 6],
    [5, 7],
    [6, 7],
    [6, 8],
    [7, 8],
    [21, -16],
    [21, -15],
    [22, -17],
    [22, -15],
    [23, -17],
    [24, -18],
    [24, -17]
];

let arrayGliderDuplicator = [
    [-24, -3],
    [-24, -2],
    [-23, -3],
    [-22, -14],
    [-22, -13],
    [-22, -5],
    [-22, -3],
    [-21, -14],
    [-21, -11],
    [-21, -5],
    [-21, -4],
    [-20, -28],
    [-20, -26],
    [-20, -10],
    [-19, -30],
    [-19, -26],
    [-19, -23],
    [-19, -22],
    [-19, -21],
    [-19, -10],
    [-18, -30],
    [-18, -10],
    [-17, -37],
    [-17, -36],
    [-17, -31],
    [-17, -26],
    [-17, -18],
    [-17, -17],
    [-17, -14],
    [-17, -11],
    [-16, -37],
    [-16, -36],
    [-16, -30],
    [-16, -22],
    [-16, -20],
    [-16, -17],
    [-16, -14],
    [-16, -13],
    [-15, -30],
    [-15, -26],
    [-15, -20],
    [-15, -19],
    [-15, -18],
    [-14, -28],
    [-14, -26],
    [-11, -11],
    [-11, -6],
    [-11, -5],
    [-11, 19],
    [-11, 20],
    [-10, -10],
    [-10, -5],
    [-10, 19],
    [-10, 20],
    [-9, -12],
    [-9, -11],
    [-9, -10],
    [-9, -5],
    [-9, -3],
    [-9, 5],
    [-9, 16],
    [-9, 17],
    [-9, 24],
    [-9, 28],
    [-9, 29],
    [-8, -4],
    [-8, -3],
    [-8, 5],
    [-8, 7],
    [-8, 15],
    [-8, 16],
    [-8, 17],
    [-8, 23],
    [-8, 27],
    [-8, 29],
    [-7, 8],
    [-7, 9],
    [-7, 16],
    [-7, 17],
    [-7, 24],
    [-7, 25],
    [-7, 26],
    [-7, 27],
    [-7, 28],
    [-6, 8],
    [-6, 9],
    [-6, 19],
    [-6, 20],
    [-6, 25],
    [-6, 26],
    [-6, 27],
    [-5, 8],
    [-5, 9],
    [-5, 19],
    [-5, 20],
    [-4, 5],
    [-4, 7],
    [-3, 5],
    [0, 6],
    [0, 7],
    [1, 6],
    [1, 7],
    [5, 7],
    [5, 8],
    [5, 9],
    [6, 9],
    [7, 8],
    [10, -9],
    [10, -7],
    [11, -11],
    [11, -7],
    [11, -1],
    [11, 0],
    [11, 1],
    [12, -18],
    [12, -17],
    [12, -11],
    [12, -3],
    [12, -1],
    [12, 2],
    [12, 5],
    [12, 6],
    [13, -18],
    [13, -17],
    [13, -12],
    [13, -7],
    [13, 1],
    [13, 2],
    [13, 5],
    [13, 8],
    [14, -11],
    [14, 9],
    [15, -11],
    [15, -7],
    [15, -4],
    [15, -3],
    [15, -2],
    [15, 9],
    [16, -9],
    [16, -7],
    [16, 9],
    [16, 35],
    [16, 36],
    [17, 5],
    [17, 8],
    [17, 14],
    [17, 15],
    [17, 35],
    [17, 37],
    [18, 5],
    [18, 6],
    [18, 14],
    [18, 16],
    [18, 37],
    [19, 16],
    [19, 37],
    [19, 38],
    [20, 16],
    [20, 17],
    [21, 25],
    [21, 26],
    [22, 25],
    [22, 27],
    [23, 27],
    [24, 27],
    [24, 28]
]

;

let arrayTubStretcher = [
    [-5, 0],
    [-5, 1],
    [-5, 2],
    [-4, 0],
    [-3, 1],
    [-2, 3],
    [-2, 4],
    [-1, 4],
    [1, 1],
    [1, 2],
    [1, 6],
    [2, -7],
    [2, -6],
    [2, -5],
    [2, 1],
    [2, 2],
    [2, 5],
    [2, 7],
    [3, -7],
    [3, 0],
    [3, 2],
    [3, 6],
    [4, -6],
    [4, -1],
    [4, 0],
    [5, -4],
    [5, -3],
    [5, -2],
    [5, -1],
    [5, 1],
    [6, -3],
    [6, -2]
];

let arrayTwinBees = [
    [-21, 30],
    [-21, 31],
    [-20, 30],
    [-19, 28],
    [-19, 30],
    [-18, 28],
    [-18, 29],
    [9, -13],
    [10, -30],
    [10, -29],
    [10, -13],
    [10, -12],
    [11, -30],
    [11, -29],
    [11, -12],
    [11, -11],
    [12, -13],
    [12, -12],
    [12, 0],
    [12, 1],
    [13, -1],
    [13, 1],
    [14, -1],
    [15, -1],
    [15, 0],
    [15, 1],
    [16, -13],
    [16, -12],
    [17, -12],
    [17, -11],
    [18, -13],
    [18, -12],
    [19, -13],
    [19, -1],
    [19, 0],
    [19, 1],
    [20, -1],
    [20, 17],
    [20, 18],
    [21, -1],
    [21, 1],
    [21, 17],
    [21, 18],
    [22, 0],
    [22, 1]
];

let arrayWasher = [
    [-2, -27],
    [-1, -27],
    [-1, -26],
    [-1, -21],
    [-1, -15],
    [-1, -9],
    [-1, -3],
    [-1, 3],
    [-1, 9],
    [-1, 15],
    [-1, 21],
    [-1, 27],
    [0, -27],
    [0, -26],
    [0, -25],
    [0, -22],
    [0, -20],
    [0, -16],
    [0, -14],
    [0, -10],
    [0, -8],
    [0, -4],
    [0, -2],
    [0, 2],
    [0, 4],
    [0, 8],
    [0, 10],
    [0, 14],
    [0, 16],
    [0, 20],
    [0, 22],
    [0, 26],
    [0, 28],
    [1, -27],
    [1, -26],
    [1, -21],
    [1, -15],
    [1, -9],
    [1, -3],
    [1, 3],
    [1, 9],
    [1, 15],
    [1, 21],
    [1, 27],
    [2, -27]
];

let arrayWindMill = [
    [-8, 3],
    [-7, 1],
    [-7, 2],
    [-7, 4],
    [-6, -1],
    [-6, 0],
    [-5, 2],
    [-5, 3],
    [-4, -1],
    [-4, 0],
    [-4, 1],
    [-2, -8],
    [-2, -7],
    [-2, -6],
    [-1, -5],
    [-1, -4],
    [-1, -1],
    [-1, 0],
    [-1, 1],
    [-1, 3],
    [-1, 4],
    [0, 2],
    [0, 3],
    [0, 4],
    [0, 5],
    [0, 6],
    [0, 7],
    [0, 8],
    [1, -7],
    [1, -6],
    [1, -5],
    [1, -4],
    [1, -3],
    [1, -2],
    [1, -1],
    [2, -3],
    [2, -2],
    [2, 0],
    [2, 1],
    [2, 2],
    [2, 5],
    [2, 6],
    [3, 7],
    [3, 8],
    [3, 9],
    [5, 0],
    [5, 1],
    [5, 2],
    [6, -2],
    [6, -1],
    [7, 1],
    [7, 2],
    [8, -3],
    [8, -1],
    [8, 0],
    [9, -2]
];

let arrayWorkerBee = [
    [-5, -7],
    [-5, -6],
    [-5, 7],
    [-5, 8],
    [-4, -6],
    [-4, 7],
    [-3, -6],
    [-3, -4],
    [-3, 5],
    [-3, 7],
    [-2, -5],
    [-2, -4],
    [-2, 5],
    [-2, 6],
    [0, -2],
    [0, -1],
    [0, 0],
    [0, 1],
    [0, 2],
    [0, 3],
    [2, -5],
    [2, -4],
    [2, 5],
    [2, 6],
    [3, -6],
    [3, -4],
    [3, 5],
    [3, 7],
    [4, -6],
    [4, 7],
    [5, -7],
    [5, -6],
    [5, 7],
    [5, 8]
];

let arrayFilter = [
    [-12, -24],
    [-12, -23],
    [-12, -22],
    [-12, -21],
    [-12, -6],
    [-12, -5],
    [-12, -4],
    [-12, -3],
    [-12, 12],
    [-12, 13],
    [-12, 14],
    [-12, 15],
    [-12, 30],
    [-12, 31],
    [-12, 32],
    [-12, 33],
    [-11, -30],
    [-11, -29],
    [-11, -25],
    [-11, -24],
    [-11, -23],
    [-11, -22],
    [-11, -21],
    [-11, -20],
    [-11, -12],
    [-11, -11],
    [-11, -7],
    [-11, -6],
    [-11, -5],
    [-11, -4],
    [-11, -3],
    [-11, -2],
    [-11, 6],
    [-11, 7],
    [-11, 11],
    [-11, 12],
    [-11, 13],
    [-11, 14],
    [-11, 15],
    [-11, 16],
    [-11, 24],
    [-11, 25],
    [-11, 29],
    [-11, 30],
    [-11, 31],
    [-11, 32],
    [-11, 33],
    [-11, 34],
    [-10, -34],
    [-10, -33],
    [-10, -32],
    [-10, -31],
    [-10, -29],
    [-10, -28],
    [-10, -25],
    [-10, -24],
    [-10, -23],
    [-10, -22],
    [-10, -20],
    [-10, -19],
    [-10, -16],
    [-10, -15],
    [-10, -14],
    [-10, -13],
    [-10, -11],
    [-10, -10],
    [-10, -7],
    [-10, -6],
    [-10, -5],
    [-10, -4],
    [-10, -2],
    [-10, -1],
    [-10, 2],
    [-10, 3],
    [-10, 4],
    [-10, 5],
    [-10, 7],
    [-10, 8],
    [-10, 11],
    [-10, 12],
    [-10, 13],
    [-10, 14],
    [-10, 16],
    [-10, 17],
    [-10, 20],
    [-10, 21],
    [-10, 22],
    [-10, 23],
    [-10, 25],
    [-10, 26],
    [-10, 29],
    [-10, 30],
    [-10, 31],
    [-10, 32],
    [-10, 34],
    [-10, 35],
    [-9, -34],
    [-9, -33],
    [-9, -32],
    [-9, -31],
    [-9, -30],
    [-9, -29],
    [-9, -21],
    [-9, -20],
    [-9, -16],
    [-9, -15],
    [-9, -14],
    [-9, -13],
    [-9, -12],
    [-9, -11],
    [-9, -3],
    [-9, -2],
    [-9, 2],
    [-9, 3],
    [-9, 4],
    [-9, 5],
    [-9, 6],
    [-9, 7],
    [-9, 15],
    [-9, 16],
    [-9, 20],
    [-9, 21],
    [-9, 22],
    [-9, 23],
    [-9, 24],
    [-9, 25],
    [-9, 33],
    [-9, 34],
    [-8, -33],
    [-8, -32],
    [-8, -31],
    [-8, -30],
    [-8, -15],
    [-8, -14],
    [-8, -13],
    [-8, -12],
    [-8, 3],
    [-8, 4],
    [-8, 5],
    [-8, 6],
    [-8, 21],
    [-8, 22],
    [-8, 23],
    [-8, 24],
    [-6, 18],
    [-6, 19],
    [-5, 16],
    [-5, 21],
    [-3, 15],
    [-3, 17],
    [-3, 20],
    [-3, 22],
    [-2, 13],
    [-2, 14],
    [-2, 15],
    [-2, 16],
    [-2, 18],
    [-2, 19],
    [-2, 21],
    [-2, 22],
    [-2, 23],
    [-2, 24],
    [-1, 10],
    [-1, 12],
    [-1, 17],
    [-1, 20],
    [-1, 25],
    [-1, 27],
    [0, 10],
    [0, 11],
    [0, 13],
    [0, 14],
    [0, 16],
    [0, 21],
    [0, 23],
    [0, 24],
    [0, 26],
    [0, 27],
    [1, 13],
    [1, 15],
    [1, 22],
    [1, 24],
    [2, 10],
    [2, 11],
    [2, 13],
    [2, 15],
    [2, 22],
    [2, 24],
    [2, 26],
    [2, 27],
    [3, 10],
    [3, 11],
    [3, 13],
    [3, 24],
    [3, 26],
    [3, 27],
    [4, 13],
    [4, 15],
    [4, 17],
    [4, 18],
    [4, 19],
    [4, 20],
    [4, 22],
    [4, 24],
    [5, 13],
    [5, 15],
    [5, 22],
    [5, 24],
    [6, 12],
    [6, 13],
    [6, 15],
    [6, 17],
    [6, 18],
    [6, 19],
    [6, 20],
    [6, 22],
    [6, 24],
    [6, 25],
    [7, 12],
    [7, 15],
    [7, 16],
    [7, 17],
    [7, 20],
    [7, 21],
    [7, 22],
    [7, 25],
    [8, 14],
    [8, 17],
    [8, 18],
    [8, 19],
    [8, 20],
    [8, 23],
    [9, 13],
    [9, 14],
    [9, 16],
    [9, 21],
    [9, 23],
    [9, 24],
    [10, 13],
    [10, 16],
    [10, 21],
    [10, 24],
    [11, 14],
    [11, 17],
    [11, 20],
    [11, 23],
    [12, 15],
    [12, 16],
    [12, 21],
    [12, 22]
];

let arrayFactory = [
    [-23, -7],
    [-23, -6],
    [-23, 19],
    [-23, 20],
    [-22, -7],
    [-22, -6],
    [-22, 19],
    [-22, 20],
    [-21, 11],
    [-21, 12],
    [-20, 10],
    [-20, 13],
    [-19, 11],
    [-19, 12],
    [-17, 6],
    [-17, 7],
    [-17, 8],
    [-16, 6],
    [-16, 8],
    [-15, -21],
    [-15, -20],
    [-15, 6],
    [-15, 7],
    [-15, 8],
    [-14, -21],
    [-14, -20],
    [-14, 6],
    [-14, 7],
    [-13, -22],
    [-13, -19],
    [-13, 5],
    [-13, 6],
    [-13, 7],
    [-12, -22],
    [-12, -19],
    [-12, -17],
    [-12, -16],
    [-12, 5],
    [-12, 7],
    [-11, -22],
    [-11, -17],
    [-11, -16],
    [-11, 5],
    [-11, 6],
    [-11, 7],
    [-10, -20],
    [-10, -19],
    [-10, -17],
    [-10, -16],
    [-9, 1],
    [-9, 2],
    [-8, -9],
    [-8, -8],
    [-8, 0],
    [-8, 3],
    [-7, -9],
    [-7, -8],
    [-7, 1],
    [-7, 2],
    [-6, 19],
    [-6, 20],
    [-5, 19],
    [-5, 20],
    [-3, -26],
    [-3, -25],
    [-3, -6],
    [-2, -30],
    [-2, -29],
    [-2, -24],
    [-2, -23],
    [-2, -22],
    [-2, -21],
    [-2, -10],
    [-2, -9],
    [-2, -6],
    [-2, -5],
    [-2, -3],
    [-2, -2],
    [-2, -1],
    [-1, -30],
    [-1, -29],
    [-1, -26],
    [-1, -25],
    [-1, -23],
    [-1, -22],
    [-1, -21],
    [-1, -10],
    [-1, -9],
    [-1, -4],
    [-1, -3],
    [-1, -2],
    [-1, -1],
    [0, -26],
    [0, -6],
    [0, -5],
    [21, 28],
    [21, 29],
    [22, 28],
    [22, 30],
    [23, 30],
    [24, 30],
    [24, 31]
];

let arrayGosperGliderGun = [
    [-20, -3],
    [-19, -5],
    [-19, -3],
    [-18, -15],
    [-18, -14],
    [-18, -7],
    [-18, -6],
    [-18, 7],
    [-18, 8],
    [-17, -16],
    [-17, -12],
    [-17, -7],
    [-17, -6],
    [-17, 7],
    [-17, 8],
    [-16, -27],
    [-16, -26],
    [-16, -17],
    [-16, -11],
    [-16, -7],
    [-16, -6],
    [-15, -27],
    [-15, -26],
    [-15, -17],
    [-15, -13],
    [-15, -11],
    [-15, -10],
    [-15, -5],
    [-15, -3],
    [-14, -17],
    [-14, -11],
    [-14, -3],
    [-13, -16],
    [-13, -12],
    [-12, -15],
    [-12, -14],
    [18, 25],
    [18, 26],
    [19, 25],
    [19, 27],
    [20, 27],
    [21, 27],
    [21, 28]
];


let arrayAcorn = [
    [-1, -2],
    [0, 0],
    [1, -3],
    [1, -2],
    [1, 1],
    [1, 2],
    [1, 3]
];

let arrayInnerChaos_Achimsp144 = [
    [-9, -13],
    [-9, -12],
    [-9, 13],
    [-9, 14],
    [-8, -13],
    [-8, -12],
    [-8, 13],
    [-8, 14],
    [-7, 5],
    [-7, 6],
    [-6, 4],
    [-6, 7],
    [-5, 5],
    [-5, 6],
    [-4, 1],
    [-3, 0],
    [-3, 2],
    [-2, -1],
    [-2, 3],
    [-1, -1],
    [-1, 2],
    [1, -1],
    [1, 2],
    [2, -2],
    [2, 2],
    [3, -1],
    [3, 1],
    [4, 0],
    [5, -5],
    [5, -4],
    [6, -6],
    [6, -3],
    [7, -5],
    [7, -4],
    [8, -13],
    [8, -12],
    [8, 13],
    [8, 14],
    [9, -13],
    [9, -12],
    [9, 13],
    [9, 14]
];

let arrayDiogonalSpaceShip_86P5H1V1 = [
    [-11, -2],
    [-11, -1],
    [-11, 0],
    [-10, -3],
    [-9, -4],
    [-8, 0],
    [-8, 1],
    [-7, -3],
    [-7, -2],
    [-7, 0],
    [-6, 3],
    [-6, 4],
    [-6, 5],
    [-5, 0],
    [-5, 3],
    [-5, 4],
    [-5, 7],
    [-5, 8],
    [-4, -9],
    [-4, 0],
    [-4, 1],
    [-4, 3],
    [-4, 7],
    [-4, 8],
    [-3, -10],
    [-3, -7],
    [-3, 0],
    [-3, 3],
    [-3, 4],
    [-2, -11],
    [-2, -7],
    [-1, -11],
    [-1, 1],
    [-1, 4],
    [0, -11],
    [0, -8],
    [0, -7],
    [0, -5],
    [0, -4],
    [0, -3],
    [0, 1],
    [0, 5],
    [0, 6],
    [0, 8],
    [0, 9],
    [1, -8],
    [1, -4],
    [1, -1],
    [1, 0],
    [1, 3],
    [1, 6],
    [2, 6],
    [2, 7],
    [2, 10],
    [3, -6],
    [3, -5],
    [3, -4],
    [3, -3],
    [3, 1],
    [3, 7],
    [3, 11],
    [4, -6],
    [4, -5],
    [4, -3],
    [4, -1],
    [4, 10],
    [5, -6],
    [5, 0],
    [5, 7],
    [5, 8],
    [6, 0],
    [6, 1],
    [6, 2],
    [7, -5],
    [7, -4],
    [7, 2],
    [7, 3],
    [7, 5],
    [8, -5],
    [8, -4],
    [8, 0],
    [8, 5],
    [9, 0],
    [10, 2],
    [10, 4],
    [11, 3]
];

let arrayInsideChaos_60P312 = [
    [-20, 0],
    [-20, 1],
    [-19, 0],
    [-19, 1],
    [-15, 11],
    [-15, 12],
    [-14, 2],
    [-14, 3],
    [-14, 10],
    [-14, 13],
    [-13, 2],
    [-13, 11],
    [-13, 12],
    [-12, -14],
    [-12, 2],
    [-11, -15],
    [-11, -13],
    [-11, 3],
    [-10, -15],
    [-10, -13],
    [-9, -14],
    [-2, 12],
    [-2, 15],
    [-1, 13],
    [-1, 14],
    [-1, 15],
    [0, -20],
    [0, -19],
    [0, 20],
    [0, 21],
    [1, -20],
    [1, -19],
    [1, 20],
    [1, 21],
    [2, -14],
    [2, -13],
    [2, -12],
    [3, -14],
    [3, -11],
    [10, 15],
    [11, 14],
    [11, 16],
    [12, -2],
    [12, 14],
    [12, 16],
    [13, -1],
    [13, 15],
    [14, -11],
    [14, -10],
    [14, -1],
    [15, -12],
    [15, -9],
    [15, -2],
    [15, -1],
    [16, -11],
    [16, -10],
    [20, 0],
    [20, 1],
    [21, 0],
    [21, 1]
];

let arraySpaceShip_58P5H1V1 = [
    [-11, 9],
    [-11, 10],
    [-10, 9],
    [-10, 10],
    [-9, 8],
    [-9, 11],
    [-8, 5],
    [-8, 6],
    [-8, 8],
    [-8, 11],
    [-7, 11],
    [-6, 3],
    [-6, 4],
    [-6, 8],
    [-6, 11],
    [-5, 3],
    [-5, 4],
    [-5, 10],
    [-4, 4],
    [-4, 6],
    [-4, 7],
    [-4, 8],
    [-4, 9],
    [-4, 10],
    [-3, 5],
    [0, 2],
    [0, 3],
    [0, 4],
    [1, 2],
    [2, 0],
    [2, 1],
    [3, -6],
    [3, -5],
    [3, 0],
    [4, -6],
    [4, -5],
    [4, -4],
    [4, 0],
    [5, -8],
    [5, -3],
    [6, -8],
    [6, -4],
    [7, -4],
    [8, -9],
    [8, -8],
    [8, -6],
    [8, -4],
    [9, -11],
    [9, -10],
    [9, -4],
    [10, -11],
    [10, -10],
    [10, -5],
    [10, -4],
    [11, -9],
    [11, -8],
    [11, -7],
    [11, -6]
];



let arraySpacShip_56P6H1V0 = [
    [-5, -7],
    [-5, -6],
    [-5, -5],
    [-5, 6],
    [-5, 7],
    [-5, 8],
    [-4, -12],
    [-4, -11],
    [-4, -10],
    [-4, -8],
    [-4, 0],
    [-4, 1],
    [-4, 9],
    [-4, 11],
    [-4, 12],
    [-4, 13],
    [-3, -8],
    [-3, -4],
    [-3, -1],
    [-3, 2],
    [-3, 5],
    [-3, 9],
    [-2, -8],
    [-2, -2],
    [-2, 3],
    [-2, 9],
    [-1, -2],
    [-1, -1],
    [-1, 2],
    [-1, 3],
    [0, -5],
    [0, -1],
    [0, 2],
    [0, 6],
    [1, -5],
    [1, -3],
    [1, 4],
    [1, 6],
    [2, -4],
    [2, -3],
    [2, -2],
    [2, -1],
    [2, 0],
    [2, 1],
    [2, 2],
    [2, 3],
    [2, 4],
    [2, 5],
    [3, -2],
    [3, 3],
    [4, -4],
    [4, 5],
    [5, -5],
    [5, 6],
    [6, -4],
    [6, 5]
];

let arrayColision = [
    [-14, -22],
    [-14, -20],
    [-13, -21],
    [-13, -20],
    [-12, -21],
    [10, -5],
    [11, -7],
    [11, -5],
    [11, -2],
    [12, -6],
    [12, -5],
    [12, -2],
    [12, 0],
    [12, 21],
    [13, -2],
    [13, -1],
    [13, 20],
    [13, 21],
    [14, 20],
    [14, 22]
];


let arrayFourBoats = [
    [-3, 0],
    [-2, -1],
    [-2, 1],
    [-1, -2],
    [-1, 0],
    [-1, 1],
    [0, -3],
    [0, -1],
    [0, 2],
    [0, 3],
    [1, -2],
    [1, -1],
    [1, 2],
    [1, 4],
    [2, 0],
    [2, 1],
    [2, 3],
    [3, 0],
    [3, 2],
    [4, 1]
];

let arrayDiamond_4812 = [
    [-4, -1],
    [-4, 0],
    [-4, 1],
    [-4, 2],
    [-2, -3],
    [-2, -2],
    [-2, -1],
    [-2, 0],
    [-2, 1],
    [-2, 2],
    [-2, 3],
    [-2, 4],
    [0, -5],
    [0, -4],
    [0, -3],
    [0, -2],
    [0, -1],
    [0, 0],
    [0, 1],
    [0, 2],
    [0, 3],
    [0, 4],
    [0, 5],
    [0, 6],
    [2, -3],
    [2, -2],
    [2, -1],
    [2, 0],
    [2, 1],
    [2, 2],
    [2, 3],
    [2, 4],
    [4, -1],
    [4, 0],
    [4, 1],
    [4, 2]
];


let arraySpaceShip_44P5H2V0 = [
    [-5, -3],
    [-5, 3],
    [-4, -4],
    [-4, -3],
    [-4, -2],
    [-4, 2],
    [-4, 3],
    [-4, 4],
    [-3, -5],
    [-3, -2],
    [-3, 2],
    [-3, 5],
    [-2, -6],
    [-2, -5],
    [-2, -4],
    [-2, 4],
    [-2, 5],
    [-2, 6],
    [-1, -5],
    [-1, -3],
    [-1, 3],
    [-1, 5],
    [0, -3],
    [0, -2],
    [0, 2],
    [0, 3],
    [1, -7],
    [1, -2],
    [1, 2],
    [1, 7],
    [2, -2],
    [2, 2],
    [3, -7],
    [3, -6],
    [3, -2],
    [3, 2],
    [3, 6],
    [3, 7],
    [4, -5],
    [4, -2],
    [4, 2],
    [4, 5],
    [5, -3],
    [5, 3]
];


let arraySpaceShip_30P5H2V0 = [
    [-5, -2],
    [-4, -3],
    [-4, -2],
    [-4, -1],
    [-3, -4],
    [-3, -3],
    [-3, -1],
    [-3, 0],
    [-1, -5],
    [-1, -3],
    [-1, -1],
    [-1, 1],
    [-1, 4],
    [0, -6],
    [0, -5],
    [0, -1],
    [0, 3],
    [0, 4],
    [0, 5],
    [1, -6],
    [1, -5],
    [1, -1],
    [1, 6],
    [2, 4],
    [2, 6],
    [3, 2],
    [3, 4],
    [4, 3],
    [4, 6],
    [5, 6]
];

let arrayTwoGliderMess = [
    [-2, -3],
    [-1, -5],
    [-1, -3],
    [0, -4],
    [0, -3],
    [1, 6],
    [2, 4],
    [2, 5],
    [3, 5],
    [3, 6]
];


let arraySpaceShip_25P3H1V0 = [
    [-2, 0],
    [-2, 1],
    [-2, 3],
    [-1, -3],
    [-1, -2],
    [-1, 0],
    [-1, 2],
    [-1, 3],
    [-1, 5],
    [-1, 6],
    [-1, 7],
    [0, -6],
    [0, -5],
    [0, -4],
    [0, -3],
    [0, 0],
    [0, 1],
    [0, 8],
    [1, -7],
    [1, -2],
    [1, 2],
    [1, 6],
    [1, 7],
    [2, -6],
    [2, -5]
];